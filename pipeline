#!/usr/bin/python
"""
Pipeline tool.
"""
import sys
import platform
import logging
import re
import click
import yaml


class PipelineData(object):
    """Class for keeping pipeline data."""
    def __init__(self, pipeline):
        """Initializing pipeline with definition (loaded from a yaml file)."""
        self.pipeline = pipeline
        self.env_list = [{}, {}, {}]


class Stage(object):
    def __init__(self, pipeline):
        """Initializing with referenz to pipeline main object."""
        self.pipeline = pipeline

    def process(self, stage):
        for entry in stage:
            key = entry.keys()[0]
            if key == "env":
                self.pipeline.data.env_list[1].update(entry[key])
                logging.debug("Updating environment at level 1 with %s",
                              self.pipeline.data.env_list[1])
                continue


class Pipeline(object):
    """Class for processing a pipeline definition."""
    def __init__(self, pipeline):
        """Initializing pipeline with definition (loaded from a yaml file)."""
        self.data = PipelineData(pipeline)

    def run(self):
        """Processing the whole pipeline definition."""
        for entry in self.data.pipeline:
            key = entry.keys()[0]
            if key == "env":
                self.data.env_list[0].update(entry[key])
                logging.debug("Updating environment at level 0 with %s",
                              self.data.env_list[0])
                continue

            if key.startswith("stage"):
                stage = Stage(self)
                stage.process(entry[key])

def setup_logging():
    """Setup of application logging."""
    logging_format = "%(asctime)-15s %(message)s"
    logging.basicConfig(format=logging_format, level=logging.DEBUG)


@click.command()
@click.option('--definition', help="Pipeline definition in yaml format")
def main(definition=""):
    """Pipeline tool."""
    setup_logging()
    logging.info("Running with Python %s", sys.version.replace("\n", ""))
    logging.info("Running on platform %s", platform.platform())
    logging.info("Processing pipeline definition '%s'", definition)

    document = yaml.load(open(definition).read())
    pipeline = Pipeline(document['pipeline'])
    pipeline.run()

if __name__ == "__main__":
    main()
