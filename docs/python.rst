The Python task
===============
Python behaves *pretty the same way* as a normal bash script
except that the code goes through the Python interpreter
found in the search path:

::

    model:
        message: 'hello world'

    pipeline:
        - stage(Example):
            - tasks(ordered):
                - python:
                    script: |
                        import sys
                        print(sys.version.replace("\n", ""))
                        print("{{ model.message }}{{ item }}!")
                    with:
                        - 1
                        - 2
                        - 3

Of course you can use Jinja2 templating accessing:
 - the model
 - and the environment variables
 - optional the item variable when using the  **width** field.
 - optional you access a variable when generated by a previous task.
   (already demonstrated when explaining the shell)

Also tags are allowed and you can specify a title for logging.
